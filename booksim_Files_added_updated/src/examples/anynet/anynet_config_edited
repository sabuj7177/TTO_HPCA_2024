// $Id: singleconfig 1535 2009-09-16 16:21:01Z dub $

// Copyright (c) 2007-2009, Trustees of The Leland Stanford Junior University
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
// 
// Redistributions of source code must retain the above copyright notice, this 
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, 
// this list of conditions and the following disclaimer in the documentation 
// and/or other materials provided with the distribution.
// Neither the name of the Stanford University nor the names of its contributors
// may be used to endorse or promote products derived from this software without
// specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
// POSSIBILITY OF SUCH DAMAGE.

//A single cross 10X10 cross bar under injection mode

topology = anynet;

network_file = /home/abhiyashhodge/Research/booksim2/src/examples/anynet/anynet_file_2x2mesh_extralink;

// Routing
routing_function = min;

// Flow Control
num_vcs     = 1;
vc_buf_size = 3;
wait_for_tail_credit = 1;


// Router architecture
vc_allocator = islip;
sw_allocator = islip;
alloc_iters  = 1;
//const_flits_per_packet = 1;

credit_delay   = 1;
routing_delay  = 0;
vc_alloc_delay = 1;
sw_alloc_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 1.0;
packet_size = 5;

traffic = uniform;

use_read_write = 0;

sample_period = 10000;
injection_rate = 0.01;


//vc_allocator = separable_input_first; 
//sw_allocator = separable_input_first;
//alloc_iters  = 1;


watch_file = abc.txt;
watch_out = abc.txt;
//watch_flits = {0,1};
//watch_all_flits = {1};
watch_packets = {0,1,2,3,4,5,6};
//watch_packets = {0};
//watch_all_packets = 1;
// virtual_cut_through = 0;
